# -*- coding: utf-8 -*-
"""problem_solving_v1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mCaPoyhK_jluYbhvOTSFXM2B1SfRZDZn
"""

import pandas as pd
import numpy as np

#Calculating probability of completing an order within 10 minutes is p.
def cal_p(mi):
  p = 0.8*(1.25-np.exp(-1*mi/5))
  return p

#Calculating growth
def cal_growth(mi,Mi):
  p = cal_p(mi)
  g = 38/40 + 1/40*((0.45+p)**0.3 +(Mi/6)**0.05)
  return g

#Get mi/Mi values for particular amount
def get_mi_Mi(M0):
  mi = np.linspace(0,M0,1000)
  Mi = M0-mi
  return mi,Mi

import matplotlib.pyplot as plt

mi,Mi = get_mi_Mi(15)
g_array = cal_growth(np.array(mi),np.array(Mi))
plt.figure(figsize=(8, 8))
plt.plot(mi,g_array,marker='.')
plt.xlabel('m1 investment')
plt.ylabel('growth at 1st day')
plt.title('Plot 1: Growth vs Investment in delivery outcome')
plt.grid()
plt.show()

df = pd.read_csv('order_frequency_data.csv')

freq_per_day = df['order_frequency_per_week'].mean()/7

init_cust = 1.02*(10**6)
pm = 0.2
aov = 300

print("Frequency per day:", freq_per_day)

#Startegy 1
overall_table = []
amount = 15
cust_base = init_cust
for i in range(30):
  row_temp = []
  row_temp.append(i+1)
  row_temp.append(amount)
  row_temp.append(cust_base)
  mi,Mi = get_mi_Mi(amount)
  g_array = cal_growth(np.array(mi),np.array(Mi))
  g = max(g_array)
  print("Day ",(i+1),"--> Amount: ",round(amount,2)," --> Customer Base: ",round(cust_base/(10**6),2)," --> Growth: ",round(g,5))
  g_index = np.argmax(g_array)
  row_temp.append(mi[g_index])
  row_temp.append(cal_p(mi[g_index]))
  row_temp.append(Mi[g_index])
  row_temp.append(g)
  row_temp.append(int(g*cust_base))
  row_temp.append(int(freq_per_day*g*cust_base))
  row_temp.append(g*freq_per_day*cust_base*pm*aov/(10**6))
  amount = g*freq_per_day*cust_base*pm*aov/(10**6)
  cust_base = int(g*cust_base)
  overall_table.append(row_temp)
print("Day 31 --> Amount: ",round(amount,2)," --> Customer Base: ",round(cust_base/(10**6),2))
print("Overall Growth: ",round(cust_base/init_cust,5))

cols = ['day-i','capital-start-i','ci-1','mi','p','Mi','G','Ci','Total-Orders','capital-end-i']
df = pd.DataFrame(overall_table,columns=cols)

df

#Startegy 1
overall_table = []
amount = 15
cust_base = init_cust
for i in range(30):
  row_temp = []
  row_temp.append(i+1)
  row_temp.append(amount)
  row_temp.append(cust_base)
  m0_array = np.linspace(0,amount,1000)
  k = 0
  while k<len(m0_array):
    m0 = m0_array[k]
    mi,Mi = get_mi_Mi(m0)
    g_array = cal_growth(np.array(mi),np.array(Mi))
    if max(g_array)>=1:
      g_index = next(x[0] for x in enumerate(g_array) if x[1] >= 1)
      g = g_array[g_index]
      mi_final = mi[g_index]
      Mi_final = Mi[g_index]
      break
    k = k+1
  print("Day ",(i+1),"--> Amount: ",round(amount,2)," --> Customer Base: ",round(cust_base/(10**6),2)," --> Growth: ",round(g,5))
  add_amount = freq_per_day*cust_base*g*pm*aov/(10**6)
  row_temp.append(mi_final)
  row_temp.append(cal_p(mi_final))
  row_temp.append(Mi_final)
  row_temp.append(g)
  row_temp.append(int(g*cust_base))
  row_temp.append(int(freq_per_day*g*cust_base))
  amount = amount+add_amount-m0
  row_temp.append(amount)
  cust_base = int(g*cust_base)
  overall_table.append(row_temp)
print("Day 31 --> Amount: ",round(amount,2)," --> Customer Base: ",round(cust_base/(10**6),2))
print("Overall Growth: ",round(cust_base/init_cust,5))
cols = ['day-i','capital-start-i','ci-1','mi','p','Mi','G','Ci','Total-Orders','capital-end-i']
df = pd.DataFrame(overall_table,columns=cols)

cols = ['day-i','capital-start-i','ci-1','mi','p','Mi','G','Ci','Total-Orders','capital-end-i']
df = pd.DataFrame(overall_table,columns=cols)
df

m0_array = np.linspace(1,50,1000)
g_array = []
mi_by_m0_array = []
for i in m0_array:
  mi,Mi = get_mi_Mi(i)
  g1 = cal_growth(np.array(mi),np.array(Mi))
  j = np.argmax(g1)
  mi_by_m0_array.append(mi[j]/i)
  g = max(g1)
  g_array.append(g)

plt.figure(figsize=(8, 8))
plt.plot(m0_array,g_array,marker='.',label = 'Maximum growth')
plt.plot(np.arange(1,51),[1]*50,label = 'Growth=1')
plt.xlabel('Total Investment')
plt.ylabel('Maximum Growth that can be achieved')
plt.title('Plot 2: Investment vs Maximum Growth')
plt.legend()
plt.grid()
plt.show()

plt.figure(figsize=(10, 10))
plt.plot(m0_array,mi_by_m0_array,marker='.')
plt.xlabel('Total Investment')
plt.ylabel('% of total investment spent in improving the delivery outcome')
plt.title('Plot 3: Total Investment vs mi/total_investment')
plt.grid()
plt.show()

m0_array = np.linspace(0,50,1000)
g_array = []
max_revenue_output = []
mi_array = []
Mi_array = []
for i in m0_array:
  mi,Mi = get_mi_Mi(i)
  mi_array.append(mi)
  Mi_array.append(Mi)
  g1 = cal_growth(np.array(mi),np.array(Mi))
  revenue_output = ((g1)*(freq_per_day*init_cust*pm*aov)/(10**6))
  max_revenue_output.append(max(revenue_output))
  g_array.append(g1)

plt.figure(figsize=(10, 10))
plt.plot(m0_array,max_revenue_output,marker='.')
plt.xlabel('Total Investment')
plt.ylabel('Maximum Revenue Output')
plt.title('Plot 4: Investment vs Output Revenue')
plt.grid()
plt.show()

percentage_used = np.linspace(0,1,1000)
amount_at_end = []
cust_base_at_end = []
overall_growth_at_end = []
for x in percentage_used:
  amount = 15
  cust_base = init_cust
  for i in range(30):
    mi,Mi = get_mi_Mi(amount*x)
    g_array = cal_growth(np.array(mi),np.array(Mi))
    g = max(g_array)
    add_amount = freq_per_day*g*cust_base*pm*aov/(10**6)
    amount = add_amount+amount*(1-x)
    cust_base = g*cust_base
  amount_at_end.append(amount)
  cust_base_at_end.append(cust_base/(10**6))
  overall_growth_at_end.append(round(cust_base/init_cust,5))

plt.figure(figsize=(10, 10))
plt.plot(percentage_used[1:],amount_at_end[1:],marker='.')
plt.xlabel('Percentage of Amount Used on each day')
plt.ylabel('Amount available in the end')
plt.title('Plot 5: % Amount Used on each day vs Amount at end after 30 days')
plt.grid()
plt.show()

plt.figure(figsize=(10, 10))
plt.plot(percentage_used[:],cust_base_at_end[:],marker='.')
plt.xlabel('Percentage of Amount Used on each day')
plt.ylabel('Customer base in the end')
plt.title('Plot 6: % Amount Used on each day vs Customer base after 30 days')
plt.grid()
plt.show()

plt.figure(figsize=(10, 10))
plt.plot(overall_growth_at_end[:],amount_at_end[:],marker='.')
plt.xlabel('Overall Growth at the end')
plt.ylabel('Amount left at the end')
plt.title('Plot 7: Overall Growth vs Amount after 30 days considering same % amount invested on each day')
plt.grid()
plt.show()

amount_used = np.linspace(0,15,1000)
amount_at_end = []
cust_base_at_end = []
overall_growth_at_end = []
for x in amount_used:
  amount = 15
  cust_base = init_cust
  for i in range(30):
    mi,Mi = get_mi_Mi(x)
    g_array = cal_growth(np.array(mi),np.array(Mi))
    g = max(g_array)
    add_amount = g*freq_per_day*cust_base*pm*aov/(10**6)
    amount = add_amount+amount-x
    cust_base = g*cust_base
  amount_at_end.append(amount)
  cust_base_at_end.append(cust_base/(10**6))
  overall_growth_at_end.append(round(cust_base/init_cust,5))

plt.figure(figsize=(10, 10))
plt.plot(amount_used[1:],amount_at_end[1:],marker='.')
plt.xlabel('Amount Used on each day')
plt.ylabel('Amount available in the end')
plt.title('Plot 8: Amount Used on each day vs Amount at end after 30 days')
plt.grid()
plt.show()

plt.figure(figsize=(10, 10))
plt.plot(amount_used[:],cust_base_at_end[:],marker='.')
plt.xlabel('Amount Used on each day')
plt.ylabel('Customer base in the end')
plt.title('Plot 9: Amount Used on each day vs Customer base after 30 days')
plt.grid()
plt.show()

plt.figure(figsize=(10, 10))
plt.plot(overall_growth_at_end[:],amount_at_end[:],marker='.')
plt.xlabel('Overall Growth at the end')
plt.ylabel('Amount left at the end')
plt.title('Plot 10: Overall Growth vs Amount after 30 days considering same amount invested on each day')
plt.grid()
plt.show()

























